-- H2 Test Database Schema for EVCS Tenant Module
-- Compatible with H2 in PostgreSQL mode

-- System Tenant Table (完全匹配 PostgreSQL 结构)
CREATE TABLE IF NOT EXISTS sys_tenant (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000),  -- 从1000开始，避免与测试数据冲突
    tenant_code VARCHAR(50) UNIQUE NOT NULL,
    tenant_name VARCHAR(100) NOT NULL,
    parent_id BIGINT,
    ancestors TEXT,
    contact_person VARCHAR(50),
    contact_phone VARCHAR(20),
    contact_email VARCHAR(100),
    address VARCHAR(200),
    social_code VARCHAR(30),
    license_url VARCHAR(500),
    tenant_type INTEGER DEFAULT 1,
    status INTEGER DEFAULT 1,
    expire_time TIMESTAMP,
    max_users INTEGER DEFAULT 100,
    max_stations INTEGER DEFAULT 50,
    max_chargers INTEGER DEFAULT 1000,
    tenant_id BIGINT DEFAULT 1,  -- 默认值为1，避免测试中 NULL 错误
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    create_by BIGINT,
    update_by BIGINT,
    deleted INTEGER DEFAULT 0,
    version INTEGER DEFAULT 1,
    remark TEXT,
    PRIMARY KEY (id)
);

-- Create Indexes
CREATE INDEX IF NOT EXISTS idx_tenant_code ON sys_tenant(tenant_code);
CREATE INDEX IF NOT EXISTS idx_tenant_parent ON sys_tenant(parent_id);
CREATE INDEX IF NOT EXISTS idx_tenant_status ON sys_tenant(status, deleted);

-- Insert virtual root node (id=0) - serves as parent for all top-level tenants
INSERT INTO sys_tenant (id, tenant_code, tenant_name, parent_id, ancestors, 
                        contact_person, contact_phone, contact_email, address,
                        social_code, license_url, tenant_type, status, 
                        expire_time, max_users, max_stations, max_chargers,
                        tenant_id, create_time, update_time, create_by, update_by, 
                        deleted, version, remark)
SELECT 0, 'ROOT', 'Virtual Root Node', NULL, '', 
       'System', '', '', '',
       NULL, NULL, 1, 1, 
       NULL, 999999, 999999, 999999,
       0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 
       0, 1, 'Virtual root node for tree structure'
WHERE NOT EXISTS (SELECT 1 FROM sys_tenant WHERE id = 0);

-- Insert default test tenants (使用标准 INSERT 语法,避免重复插入)
INSERT INTO sys_tenant (id, tenant_code, tenant_name, parent_id, ancestors, 
                        contact_person, contact_phone, contact_email, address,
                        social_code, license_url, tenant_type, status, 
                        expire_time, max_users, max_stations, max_chargers,
                        tenant_id, create_time, update_time, create_by, update_by, 
                        deleted, version, remark)
SELECT 1, 'SYSTEM', '系统租户', 0, '0', 
       '系统管理员', '13800138000', 'admin@evcs.com', '系统地址',
       NULL, NULL, 1, 1, 
       NULL, 999999, 999999, 999999,
       1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 
       0, 1, '系统默认租户'
WHERE NOT EXISTS (SELECT 1 FROM sys_tenant WHERE id = 1);

INSERT INTO sys_tenant (id, tenant_code, tenant_name, parent_id, ancestors, 
                        contact_person, contact_phone, contact_email, address,
                        social_code, license_url, tenant_type, status, 
                        expire_time, max_users, max_stations, max_chargers,
                        tenant_id, create_time, update_time, create_by, update_by, 
                        deleted, version, remark)
SELECT 2, 'TENANT_001', '测试租户1', 1, '0,1', 
       '张三', '13800138001', 'tenant1@evcs.com', '测试地址1',
       NULL, NULL, 2, 1, 
       NULL, 100, 50, 200,
       2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 
       0, 1, '测试租户1'
WHERE NOT EXISTS (SELECT 1 FROM sys_tenant WHERE id = 2);

INSERT INTO sys_tenant (id, tenant_code, tenant_name, parent_id, ancestors, 
                        contact_person, contact_phone, contact_email, address,
                        social_code, license_url, tenant_type, status, 
                        expire_time, max_users, max_stations, max_chargers,
                        tenant_id, create_time, update_time, create_by, update_by, 
                        deleted, version, remark)
SELECT 3, 'TENANT_002', '测试租户2', 1, '0,1', 
       '李四', '13800138002', 'tenant2@evcs.com', '测试地址2',
       NULL, NULL, 2, 1, 
       NULL, 100, 50, 200,
       3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 
       0, 1, '测试租户2'
WHERE NOT EXISTS (SELECT 1 FROM sys_tenant WHERE id = 3);

-- 创建 evcs_station 表 (简化版本，仅用于关联检查)
CREATE TABLE IF NOT EXISTS evcs_station (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    station_code VARCHAR(50) UNIQUE NOT NULL,
    station_name VARCHAR(100) NOT NULL,
    tenant_id BIGINT NOT NULL,
    status INTEGER DEFAULT 1,
    deleted INTEGER DEFAULT 0,
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_station_tenant ON evcs_station(tenant_id, deleted);

-- 创建 evcs_charging_order 表 (简化版本，仅用于关联检查)
CREATE TABLE IF NOT EXISTS evcs_charging_order (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_no VARCHAR(50) UNIQUE NOT NULL,
    tenant_id BIGINT NOT NULL,
    status INTEGER DEFAULT 1,
    deleted INTEGER DEFAULT 0,
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_order_tenant ON evcs_charging_order(tenant_id, deleted);

-- 创建 evcs_payment_record 表 (简化版本，仅用于关联检查)
CREATE TABLE IF NOT EXISTS evcs_payment_record (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    payment_no VARCHAR(50) UNIQUE NOT NULL,
    tenant_id BIGINT NOT NULL,
    deleted INTEGER DEFAULT 0,
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_payment_tenant ON evcs_payment_record(tenant_id, deleted);


